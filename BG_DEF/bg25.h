// bg25.h
#pragma once

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
extern RgbPalette rgbBg25;

// buffer palette for writing to CRAM (populated at runtime)
extern RgbBuff bufferBg25;

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
extern HslPalette hslBg25;

// palette ranges - used with the palette group collection.
extern PaletteRange p_rangeBg25; // for running the demo
extern PaletteRange p_rangeBg250; // default range - includes all unique palette entries
extern PaletteRange p_rangeBg251;
extern PaletteRange p_rangeBg252;
extern PaletteRange p_rangeBg253;
extern PaletteRange p_rangeBg254;

// tracks the accumulation of changes for the HSL color model
extern GlobalHSL hsl_incBg250;

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
extern ImageAttr attrBg250; // default attributes (for single color image)

extern PaletteRange *paletteRangeBg25[];

extern Uint8 bg25_paletteGroups;

extern Uint8 bg25_spr_id;

// extern jo_palette bg25_palette;

// Helper Functions

jo_palette	*my_bg25_palette_handling(void);

void init_bg25_img(void);

void update_bg25_color(void);

void update_bg25_palette(void);

void reset_bg25 (void);
