// bg01.h
#ifndef BG01_H
#define BG01_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette bg01 = {
    { {255, 203, 87}, {255, 113, 81}, {255, 165, 115}, {251, 31, 71}, {163, 191, 239}, {211, 217, 219}, {255, 237, 204}, {255, 255, 241}, 
      {33, 77, 65}, {61, 95, 71}, {237, 205, 159}, {199, 177, 115}, {135, 137, 73}, {91, 121, 65}, {153, 151, 99}, {255, 255, 241}, 
      {255, 255, 255} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferBg01 = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslBg01 = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeBg01  = { 0, 16 }; // for running the demo
PaletteRange p_rangeBg010 = { 0, 16 }; // default range - includes all unique palette entries

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incBg01 = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrBg010 = { 0, 0, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), 0, 0, 0, 0}; // default attributes (for single color image)

PaletteRange *paletteRangeBg01[] = {
    &p_rangeBg010   // Index 0
};

Uint8 paletteGroups = 1;

Uint8 bg01_spr_id;

static jo_palette bg01_palette;

// Helper Functions

jo_palette	*my_bg01_palette_handling(void)
{
    jo_create_palette(&bg01_palette);
    return (&bg01_palette);
}

void init_bg01_img(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(my_bg01_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "BG01.TGA", 0);
    jo_vdp2_set_nbg1_8bits_image(&img, bg01_palette.id, false);
    jo_free_img(&img);

    MultiRgbToHsl(&hslBg01, &rgbBg01, &p_rangeBg010);
    min_max_sl_id(&hslBg01, &p_rangeBg010, &attrBg010);
}

void update_bg01_color(void) {
    MultiPalette2Buffer(&bufferBg01, &hslBg01, &hsl_incBg010, &p_rangeBg01);
}

void update_bg01_palette(void) {
    UpdatePaletteFromBuffer(&bufferBg01, &bg01_palette, &p_rangeBg01);
}

void reset_bg01 (void) {
    MultiRgbToHsl(&hslBg01, &rgbBg01, &p_rangeBg010);
    min_max_sl_id(&hslBg01, &p_rangeBg010, &attrBg010);
    MultiPalette2Buffer(&bufferBg01, &hslBg01, &hsl_incBg010, &p_rangeBg010);
}

#endif // BG01_H
