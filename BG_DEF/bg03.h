// bg03.h
#ifndef BG03_H
#define BG03_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette rgbBg03 = {
    { {255, 21, 1}, {149, 31, 53}, {215, 73, 59}, {109, 1, 45}, {125, 61, 93}, {187, 83, 83}, {251, 121, 87}, {255, 207, 131}, 
      {37, 27, 31}, {49, 41, 51}, {219, 137, 87}, {181, 109, 63}, {83, 71, 51}, {63, 57, 47}, {125, 89, 53}, {255, 235, 198}, 
      {255, 255, 189} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferBg03 = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslBg03 = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeBg03  = { 0, 16 }; // for running the demo
PaletteRange p_rangeBg030 = { 0, 16 }; // default range - includes all unique palette entries

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incBg03 = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrBg030 = { 0, 0, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), 0, 0, 0, 0}; // default attributes (for single color image)

PaletteRange *paletteRangeBg03[] = {
    &p_rangeBg030   // Index 0
};

Uint8 paletteGroups = 1;

Uint8 bg03_spr_id;

static jo_palette bg03_palette;

// Helper Functions

jo_palette	*my_bg03_palette_handling(void)
{
    jo_create_palette(&bg03_palette);
    return (&bg03_palette);
}

void init_bg03_img(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(my_bg03_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "BG03.TGA", 0);
    jo_vdp2_set_nbg1_8bits_image(&img, bg03_palette.id, false);
    jo_free_img(&img);

    MultiRgbToHsl(&hslBg03, &rgbBg03, &p_rangeBg030);
    min_max_sl_id(&hslBg03, &p_rangeBg030, &attrBg030);
}

void update_bg03_color(void) {
    MultiPalette2Buffer(&bufferBg03, &hslBg03, &hsl_incBg030, &p_rangeBg03);
}

void update_bg03_palette(void) {
    UpdatePaletteFromBuffer(&bufferBg03, &bg03_palette, &p_rangeBg03);
}

void reset_bg03 (void) {
    MultiRgbToHsl(&hslBg03, &rgbBg03, &p_rangeBg030);
    min_max_sl_id(&hslBg03, &p_rangeBg030, &attrBg030);
    MultiPalette2Buffer(&bufferBg03, &hslBg03, &hsl_incBg030, &p_rangeBg030);
}

#endif // BG03_H
