// font.h
#ifndef FONT_H
#define FONT_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette rgbFont = {
    { {1, 1, 1}, {1, 255, 1}, {255, 255, 255}, {87, 87, 87}, {145, 145, 145}, {223, 125, 27}, {235, 189, 21}, {249, 163, 27}, 
      {255, 245, 141}, {249, 179, 183}, {33, 191, 255}, {33, 191, 255}, {33, 191, 255}, {33, 191, 255}, {237, 29, 37}, {241, 255, 1}, 
      {255, 10, 10}, {255, 194, 10}, {133, 255, 10}, {10, 255, 71}, {10, 255, 255}, {10, 71, 255}, {133, 10, 255}, {255, 10, 194}, 
      {255, 255, 255}, {1, 1, 1}, {27, 27, 27}, {27, 27, 27}, {247, 247, 1}, {255, 255, 255}, {63, 73, 205}, {247, 247, 1}, 
      {1, 1, 1}, {161, 25, 99}, {213, 77, 153}, {235, 121, 185}, {255, 175, 201}, {40, 130, 200}, {153, 217, 234}, {199, 235, 245}, 
      {205, 205, 205}, {215, 206, 203}, {231, 227, 223}, {255, 255, 255}, {143, 211, 251}, {47, 157, 223}, {39, 123, 173}, {255, 251, 177}, 
      {255, 243, 1}, {243, 231, 1}, {243, 119, 167}, {223, 47, 91}, {173, 39, 107}, {225, 163, 177}, {195, 75, 99}, {149, 51, 71}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {85, 217, 255}, {85, 217, 255}, {85, 217, 255}, {85, 217, 255}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {137, 125, 119}, {195, 195, 195}, {201, 197, 193}, {217, 215, 213}, 
      {255, 255, 255}, {0, 0, 0}, {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {195, 195, 195}, {255, 255, 255}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {137, 125, 119}, {195, 195, 195}, {241, 217, 175}, {243, 209, 159}, 
      {255, 255, 255}, {1, 203, 255}, {63, 73, 205}, {153, 217, 235}, {253, 179, 1}, {255, 243, 1}, {237, 29, 37}, {255, 201, 15}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {43, 35, 35}, {195, 195, 195}, {255, 175, 43}, {249, 163, 27}, 
      {255, 255, 255}, {41, 35, 30}, {253, 150, 57}, {118, 78, 50}, {144, 133, 132}, {72, 22, 79}, {252, 245, 163}, {211, 1, 1}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {79, 55, 25}, {195, 195, 195}, {129, 89, 39}, {199, 145, 79}, 
      {255, 255, 255}, {244, 246, 59}, {240, 101, 35}, {169, 39, 100}, {252, 252, 229}, {245, 181, 150}, {249, 197, 59}, {196, 45, 52}, 
      {1, 1, 1}, {237, 137, 171}, {241, 189, 207}, {127, 127, 127}, {19, 19, 19}, {195, 195, 195}, {65, 65, 65}, {0, 0, 0}, 
      {71, 65, 63}, {1, 1, 1}, {255, 255, 255}, {63, 73, 205}, {1, 163, 233}, {5, 183, 255}, {1, 203, 255}, {153, 217, 235}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {137, 125, 119}, {195, 195, 195}, {253, 245, 239}, {201, 197, 193}, 
      {255, 255, 255}, {255, 103, 53}, {253, 179, 1}, {255, 201, 15}, {255, 205, 1}, {255, 255, 255}, {255, 46, 40}, {205, 31, 27}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {79, 55, 25}, {195, 195, 195}, {175, 141, 103}, {129, 89, 39}, 
      {255, 255, 255}, {255, 241, 187}, {255, 233, 157}, {255, 205, 121}, {225, 155, 85}, {167, 99, 31}, {0, 0, 0}, {0, 0, 0}, 
      {1, 1, 1}, {255, 125, 169}, {255, 175, 201}, {127, 127, 127}, {85, 121, 129}, {195, 195, 195}, {177, 201, 217}, {127, 175, 191}, 
      {255, 255, 255}, {1, 1, 1}, {29, 81, 129}, {27, 105, 185}, {53, 133, 237}, {33, 191, 255}, {83, 191, 249}, {133, 209, 251}, 
      {1, 1, 1}, {81, 55, 23}, {175, 141, 103}, {127, 127, 127}, {79, 55, 25}, {195, 195, 195}, {129, 89, 39}, {175, 141, 103}, 
      {255, 255, 255}, {141, 231, 255}, {157, 251, 253}, {191, 253, 255}, {207, 249, 253}, {253, 255, 255}, {0, 0, 0}, {255, 255, 255}, 
      {1, 1, 1}, {39, 26, 24}, {73, 46, 42}, {107, 67, 53}, {123, 78, 58}, {134, 93, 72}, {157, 107, 81}, {163, 111, 90}, 
      {255, 255, 255}, {161, 120, 96}, {171, 133, 105}, {178, 138, 115}, {189, 148, 120}, {201, 159, 134}, {217, 182, 150}, {233, 201, 161}, 
      {11, 11, 11}, {255, 125, 169}, {249, 179, 183}, {87, 87, 87}, {255, 245, 141}, {255, 255, 255}, {255, 175, 43}, {249, 163, 27}, 
      {223, 125, 27}, {189, 103, 17}, {1, 1, 129}, {1, 129, 129}, {3, 255, 129}, {17, 65, 129}, {191, 17, 129}, {129, 255, 129}, 
      {129, 129, 249}, {65, 17, 129}, {239, 191, 129}, {239, 65, 129}, {191, 239, 129}, {17, 191, 129}, {65, 239, 129}, {255, 3, 135}, 
      {127, 1, 129}, {255, 127, 129}, {211, 249, 129}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferFont = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslFont = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeFont  = { 0, 254 }; // for running the demo
PaletteRange p_rangeFont0 = { 0, 254 }; // default range - includes all unique palette entries
PaletteRange p_rangeFont1 = { 2, 6 };
PaletteRange p_rangeFont2 = { 16, 23 };
PaletteRange p_rangeFont3 = { 26, 26 };
PaletteRange p_rangeFont4 = { 27, 27 };
PaletteRange p_rangeFont5 = { 28, 28 };
PaletteRange p_rangeFont6 = { 31, 31 };
PaletteRange p_rangeFont7 = { 33, 36 };
PaletteRange p_rangeFont8 = { 37, 39 };
PaletteRange p_rangeFont9 = { 40, 43 };
PaletteRange p_rangeFont10 = { 65, 66 };
PaletteRange p_rangeFont11 = { 68, 71 };
PaletteRange p_rangeFont12 = { 81, 82 };
PaletteRange p_rangeFont13 = { 84, 87 };
PaletteRange p_rangeFont14 = { 97, 98 };
PaletteRange p_rangeFont15 = { 100, 103 };
PaletteRange p_rangeFont16 = { 113, 114 };
PaletteRange p_rangeFont17 = { 116, 119 };
PaletteRange p_rangeFont18 = { 129, 130 };
PaletteRange p_rangeFont19 = { 132, 135 };
PaletteRange p_rangeFont20 = { 145, 146 };
PaletteRange p_rangeFont21 = { 148, 151 };
PaletteRange p_rangeFont22 = { 161, 162 };
PaletteRange p_rangeFont23 = { 164, 167 };
PaletteRange p_rangeFont24 = { 177, 178 };
PaletteRange p_rangeFont25 = { 180, 183 };
PaletteRange p_rangeFont26 = { 193, 194 };
PaletteRange p_rangeFont27 = { 196, 199 };
PaletteRange p_rangeFont28 = { 209, 215 };
PaletteRange p_rangeFont29 = { 225, 231 };
PaletteRange p_rangeFont30 = { 89, 91 };
PaletteRange p_rangeFont31 = { 153, 156 };
PaletteRange p_rangeFont32 = { 158, 159 };
PaletteRange p_rangeFont33 = { 235, 254 };

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incFont = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrFont0 = { 0, 0, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), 0, 0, 0, 0}; // default attributes (for single color image)

PaletteRange *paletteRangeFont[] = {
    &p_rangeFont0,  // Index 0
    &p_rangeFont1,  // Index 1
    &p_rangeFont2,  // Index 2
    &p_rangeFont3,  // Index 3
    &p_rangeFont4,  // Index 4
    &p_rangeFont5,  // Index 5
    &p_rangeFont6,  // Index 6
    &p_rangeFont7,  // Index 7
    &p_rangeFont8,  // Index 8
    &p_rangeFont9,  // Index 9
    &p_rangeFont10,  // Index 10
    &p_rangeFont11,  // Index 11
    &p_rangeFont12,  // Index 12
    &p_rangeFont13,  // Index 13
    &p_rangeFont14,  // Index 14
    &p_rangeFont15,  // Index 15
    &p_rangeFont16,  // Index 16
    &p_rangeFont17,  // Index 17
    &p_rangeFont18,  // Index 18
    &p_rangeFont19,  // Index 19
    &p_rangeFont20,  // Index 20
    &p_rangeFont21,  // Index 21
    &p_rangeFont22,  // Index 22
    &p_rangeFont23,  // Index 23
    &p_rangeFont24,  // Index 24
    &p_rangeFont25,  // Index 25
    &p_rangeFont26,  // Index 26
    &p_rangeFont27,  // Index 27
    &p_rangeFont28,  // Index 28
    &p_rangeFont29,  // Index 29
    &p_rangeFont30,  // Index 30
    &p_rangeFont31,  // Index 31
    &p_rangeFont32,  // Index 32
    &p_rangeFont33   // Index 33
};

Uint8 paletteGroups = 34;

Uint8 font_spr_id;

static jo_palette font_palette;

// Helper Functions

jo_palette	*my_font_palette_handling(void)
{
    jo_create_palette(&font_palette);
    return (&font_palette);
}

void init_font_img(void) {
    jo_set_tga_palette_handling(my_font_palette_handling);
    font_spr_id = jo_sprite_add_tga(JO_ROOT_DIR, "FONT.TGA", 255);
    MultiRgbToHsl(&hslFont, &rgbFont, &p_rangeFont0);
    min_max_sl_id(&hslFont, &p_rangeFont0, &attrFont0);
}

void update_font_color(void) {
    MultiPalette2Buffer(&bufferFont, &hslFont, &hsl_incFont0, &p_rangeFont);
}

void update_font_palette(void) {
    UpdatePaletteFromBuffer(&bufferFont, &font_palette, &p_rangeFont);
}

void reset_font (void) {
    MultiRgbToHsl(&hslFont, &rgbFont, &p_rangeFont0);
    min_max_sl_id(&hslFont, &p_rangeFont0, &attrFont0);
    MultiPalette2Buffer(&bufferFont, &hslFont, &hsl_incFont0, &p_rangeFont0);
}

#endif // FONT_H
