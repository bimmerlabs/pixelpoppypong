// bg26.h
#pragma once

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

extern Uint8 current_background;

// palette for night
extern RgbPalette rgbBg26_1;
// palette for dawn
extern RgbPalette rgbBg26_2;
// palette for day
extern RgbPalette rgbBg26_3;
// palette for dusk
extern RgbPalette rgbBg26_4;

// buffer palette for writing to CRAM (populated at runtime)
extern RgbBuff bufferBg26;

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
extern HslPalette hslBg26;

// palette ranges - used with the palette group collection.
extern PaletteRange p_rangeBg26; // for running the demo
extern PaletteRange p_rangeBg260; // default range - includes all unique palette entries
extern PaletteRange p_rangeBg261;
extern PaletteRange p_rangeBg262;
extern PaletteRange p_rangeBg263;
extern PaletteRange p_rangeBg264;

// tracks the accumulation of changes for the HSL color model
extern GlobalHSL hsl_incBg260;

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
extern ImageAttr attrBg260; // default attributes (for single color image)

extern PaletteRange *paletteRangeBg26[];

extern Uint8 bg26_paletteGroups;

extern Uint8 bg26_spr_id;

// extern jo_palette bg26_palette;

// Helper Functions

jo_palette	*my_bg26_palette_handling(void);

void init_bg26_img(void);

void update_bg26_color(void);

void update_bg26_palette(void);

void reset_bg26 (void);
