// bg02.h
#ifndef BG02_H
#define BG02_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette rgbBg02 = {
    { {255, 105, 75}, {221, 51, 47}, {251, 87, 69}, {167, 25, 27}, {139, 185, 255}, {233, 245, 255}, {197, 225, 255}, {133, 193, 255}, 
      {21, 45, 5}, {29, 67, 23}, {155, 157, 89}, {125, 145, 1}, {75, 113, 1}, {49, 95, 19}, {73, 135, 1}, {197, 225, 255}, 
      {133, 193, 255} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferBg02 = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslBg02 = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeBg02  = { 0, 16 }; // for running the demo
PaletteRange p_rangeBg020 = { 0, 16 }; // default range - includes all unique palette entries

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incBg02 = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrBg020 = { 0, 0, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), 0, 0, 0, 0}; // default attributes (for single color image)

PaletteRange *paletteRangeBg02[] = {
    &p_rangeBg020   // Index 0
};

Uint8 paletteGroups = 1;

Uint8 bg02_spr_id;

static jo_palette bg02_palette;

// Helper Functions

jo_palette	*my_bg02_palette_handling(void)
{
    jo_create_palette(&bg02_palette);
    return (&bg02_palette);
}

void init_bg02_img(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(my_bg02_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "BG02.TGA", 0);
    jo_vdp2_set_nbg1_8bits_image(&img, bg02_palette.id, false);
    jo_free_img(&img);

    MultiRgbToHsl(&hslBg02, &rgbBg02, &p_rangeBg020);
    min_max_sl_id(&hslBg02, &p_rangeBg020, &attrBg020);
}

void update_bg02_color(void) {
    MultiPalette2Buffer(&bufferBg02, &hslBg02, &hsl_incBg020, &p_rangeBg02);
}

void update_bg02_palette(void) {
    UpdatePaletteFromBuffer(&bufferBg02, &bg02_palette, &p_rangeBg02);
}

void reset_bg02 (void) {
    MultiRgbToHsl(&hslBg02, &rgbBg02, &p_rangeBg020);
    min_max_sl_id(&hslBg02, &p_rangeBg020, &attrBg020);
    MultiPalette2Buffer(&bufferBg02, &hslBg02, &hsl_incBg020, &p_rangeBg020);
}

#endif // BG02_H
