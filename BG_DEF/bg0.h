// bg0.h
#pragma once
// #ifndef BG0_H
// #define BG0_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette rgbBg0 = {
    { {26, 57, 17}, {39, 74, 19}, {47, 84, 21}, {33, 66, 17}, {43, 80, 19}, {53, 90, 23}, {36, 71, 17}, {29, 62, 16}, 
      {40, 77, 19}, {49, 87, 21}, {37, 71, 21}, {49, 85, 24}, {41, 76, 22}, {44, 80, 22}, {30, 62, 19}, {33, 66, 19} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferBg0 = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslBg0 = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeBg0  = { 0, 15 }; // for running the demo
PaletteRange p_rangeBg00 = { 0, 15 }; // default range - includes all unique palette entries

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incBg0 = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrBg00 = { 0, 0, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), 0, 0, 0, 0}; // default attributes (for single color image)

PaletteRange *paletteRangeBg0[] = {
    &p_rangeBg00   // Index 0
};

Uint8 bg0_paletteGroups = 1;

Uint8 bg0_spr_id;

static jo_palette bg0_palette;

// Helper Functions

jo_palette	*my_bg0_palette_handling(void)
{
    jo_create_palette(&bg0_palette);
    return (&bg0_palette);
}

void init_bg0_img(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(my_bg0_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "BG0.TGA", 0);
    jo_vdp2_set_nbg1_8bits_image(&img, bg0_palette.id, false);
    jo_free_img(&img);
    jo_set_tga_palette_handling(JO_NULL);

    MultiRgbToHsl(&hslBg0, &rgbBg0, &p_rangeBg00);
    min_max_sl_id(&hslBg0, &p_rangeBg00, &attrBg00);
    slZoomNbg1(toFIXED(0.50), toFIXED(1.00));
}

void update_bg0_color(void) {
    MultiPalette2Buffer(&bufferBg0, &hslBg0, &hsl_incBg0, &p_rangeBg0);
}

void update_bg0_palette(void) {
    UpdatePaletteFromBuffer(&bufferBg0, &bg0_palette, &p_rangeBg0);
}

void reset_bg0 (void) {
    MultiRgbToHsl(&hslBg0, &rgbBg0, &p_rangeBg00);
    min_max_sl_id(&hslBg0, &p_rangeBg00, &attrBg00);
    MultiPalette2Buffer(&bufferBg0, &hslBg0, &hsl_incBg0, &p_rangeBg00);
}

// #endif // BG0_H
