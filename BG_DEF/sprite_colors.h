// sprite_colors.h
#pragma once

// this file is autogenerated - see tga_tools.pl
#include "../main.h"
#include "../palettetools.h"

#define FONT_CHARS 30

extern bool do_update_All;
extern bool do_update_font2All;
extern bool do_update_ppplogo;
extern bool do_update_logo1;
extern bool do_update_Goals[MAX_PLAYERS];
extern bool do_update_Pmenu[MAX_PLAYERS];
extern bool do_update_PmenuAll;
extern bool do_update_menu1;
extern bool do_update_menu2;
extern bool do_update_menu3;
extern bool do_update_menu4;
extern bool do_update_fish;
extern bool do_update_bomb;
extern bool do_update_shroom;

extern bool update_palette_All;
extern bool update_palette_font2All;
extern bool update_palette_ppplogo;
extern bool update_palette_logo1;
extern bool update_palette_Goals[MAX_PLAYERS];
extern bool update_palette_Pmenu[MAX_PLAYERS];
extern bool update_palette_PmenuAll;
extern bool update_palette_menu1;
extern bool update_palette_menu2;
extern bool update_palette_menu3;
extern bool update_palette_menu4;
extern bool update_palette_fish;
extern bool update_palette_bomb;
extern bool update_palette_shroom;

// tracks the accumulation of changes for the HSL color model
extern GlobalHSL hsl_incSprites;

extern HslPalette hslSprites;

extern RgbBuff bufferSprites; // debug - delete later

extern ImageAttr attrSprites;

extern PaletteRange p_rangeSpritesAll;
extern PaletteRange p_rangeFont2All;
extern PaletteRange p_rangeFont2[FONT_CHARS];
extern PaletteRange p_rangeLogo;
extern PaletteRange p_rangeGoals[MAX_PLAYERS];
extern PaletteRange p_rangePmenu[MAX_PLAYERS];
extern PaletteRange p_rangePmenuAll;
extern PaletteRange p_rangeMenu1;
extern PaletteRange p_rangeMenu2;
extern PaletteRange p_rangeMenu3;
extern PaletteRange p_rangeMenu4;
extern PaletteRange p_rangeFish;
extern PaletteRange p_rangeBomb;
extern PaletteRange p_rangeShroom;
extern PaletteRange p_rangeNormalMap;

void init_sprites_img(void);

bool calculate_sprites_color(PaletteRange *range);

bool update_sprites_color(PaletteRange *range);

bool update_sprites_palette(PaletteRange *range);

void reset_sprites(void);

// HSL calc
void update_ppplogo_color(void);
void update_ppplogo_palette(void);

// all palettes
static inline void updateAllColors(void) {
	if (!do_update_All)
		return;
	update_palette_All = update_sprites_color(&p_rangeSpritesAll);
	do_update_All = false;
}
static inline void updateAllPalette(void) {
	if (!update_palette_All)
		return;
	update_palette_All = update_sprites_palette(&p_rangeSpritesAll);
}

// title screen menu
static inline void updateTitleMenuColors(void) {
	if (do_update_menu1) {
		update_palette_menu1 = update_sprites_color(&p_rangeMenu1);
		do_update_menu1 = false;
	}
	if (do_update_menu2) {
		update_palette_menu2 = update_sprites_color(&p_rangeMenu2);
		do_update_menu2 = false;
	}
	if (do_update_menu3) {
		update_palette_menu3 = update_sprites_color(&p_rangeMenu3);
		do_update_menu3 = false;
	}
	if (do_update_menu4) {
		update_palette_menu4 = update_sprites_color(&p_rangeMenu4);
		do_update_menu4 = false;
	}
}
static inline void updateTitleMenuPalette(void) {
	if (update_palette_menu1) {
		update_palette_menu1 = update_sprites_palette(&p_rangeMenu1);
	}
	if (update_palette_menu2) {
		update_palette_menu2 = update_sprites_palette(&p_rangeMenu2);
	}
	if (update_palette_menu3) {
		update_palette_menu3 = update_sprites_palette(&p_rangeMenu3);
	}
	if (update_palette_menu4) {
		update_palette_menu4 = update_sprites_palette(&p_rangeMenu4);
	}
}

// team select menu
static inline void updateTeamSelectColors(void) {
	if (do_update_PmenuAll) {
		update_palette_PmenuAll = update_sprites_color(&p_rangePmenuAll);
		do_update_PmenuAll = false;
	}
	// cursors
	for (Uint8 i = 0; i < MAX_PLAYERS; i++) {
		if (do_update_Pmenu[i]) {
			update_palette_Pmenu[i] = update_sprites_color(&p_rangePmenu[i]);
			do_update_Pmenu[i] = false;
		}
	}
}
static inline void updateTeamSelectPalette(void) {
	if (update_palette_PmenuAll) {
		update_palette_PmenuAll = update_sprites_palette(&p_rangePmenuAll);
	}
	// cursors
	for (Uint8 i = 0; i < MAX_PLAYERS; i++) {
		if (update_palette_Pmenu[i]) {
			update_palette_Pmenu[i] = update_sprites_palette(&p_rangePmenu[i]);
		}
	}
}

// gameplay
static __jo_force_inline void updateGameColors(void) {
	if (do_update_shroom) {
		update_palette_shroom = update_sprites_color(&p_rangeShroom);
		do_update_shroom = false;
	}
	for (Uint8 i = 0; i < MAX_PLAYERS; i++) {
		// power meter
		if (do_update_Pmenu[i]) {
			update_palette_Pmenu[i] = update_sprites_color(&p_rangePmenu[i]);
			do_update_Pmenu[i] = false;
		}
		if (update_palette_Goals[i]) {
			update_palette_Goals[i] = update_sprites_color(&p_rangeGoals[i]);
			do_update_Goals[i] = false;
		}
	}
	if (do_update_PmenuAll) {
		update_palette_PmenuAll = update_sprites_color(&p_rangePmenuAll);
		do_update_PmenuAll = false;
	}
}
static __jo_force_inline void updateGamePalette(void) {
	if (update_palette_shroom) {
		update_palette_shroom = update_sprites_palette(&p_rangeShroom);
	}
	for (Uint8 i = 0; i < MAX_PLAYERS; i++) {
		// power meter
		if (update_palette_Pmenu[i]) {
			update_palette_Pmenu[i] = update_sprites_palette(&p_rangePmenu[i]);
		}
		if (update_palette_Goals[i]) {
			update_palette_Goals[i] = update_sprites_palette(&p_rangeGoals[i]);
		}
	}
	if (update_palette_PmenuAll) {
		update_palette_PmenuAll = update_sprites_palette(&p_rangePmenuAll);
	}
}


// name entry
static inline void initNameEntryColors(void) {
	for (unsigned int i = 0; i < FONT_CHARS; i++) {
		unsigned int color_id = p_rangeFont2[i].upper;
		hslSprites.color[color_id].h = (i * 12); // 30 chars * 12 degrees = 360
		hslSprites.color[color_id].s = 255;
		hslSprites.color[color_id].l = 112;
	}
	do_update_font2All = calculate_sprites_color(&p_rangeFont2All);
}
static inline void updateNameEntryColors(void) {
	if (do_update_font2All) {
		update_palette_font2All = update_sprites_color(&p_rangeFont2All);
		do_update_font2All = false;
	}
}
static inline void updateNameEntryPalette(void) {
	if (update_palette_font2All) {
		update_palette_font2All = update_sprites_palette(&p_rangeFont2All);
	}
}