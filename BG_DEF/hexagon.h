// hexagon.h
#ifndef HEXAGON_H
#define HEXAGON_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette rgbHexagon = {
    { {78, 9, 143}, {10, 138, 151}, {14, 71, 146}, {23, 198, 146}, {238, 72, 150}, {248, 140, 151}, {142, 135, 224}, {129, 71, 222}, 
      {169, 164, 225}, {53, 75, 204}, {148, 106, 224}, {52, 135, 206}, {63, 103, 209}, {129, 1, 138}, {56, 172, 210}, {62, 195, 197}, 
      {145, 101, 236}, {139, 136, 237}, {85, 102, 236}, {232, 198, 146}, {133, 119, 237}, {144, 151, 236}, {86, 137, 236}, {88, 154, 238}, 
      {113, 119, 238}, {131, 27, 195}, {123, 28, 201}, {137, 168, 236}, {165, 149, 236}, {34, 41, 149}, {172, 101, 237}, {198, 233, 149}, 
      {138, 34, 179}, {115, 73, 231}, {131, 73, 235}, {59, 232, 144}, {82, 164, 234}, {170, 118, 244}, {109, 151, 234}, {164, 138, 243}, 
      {110, 108, 239}, {135, 183, 236}, {160, 199, 208}, {140, 101, 247}, {131, 117, 252}, {99, 115, 252}, {117, 136, 233}, {133, 131, 253}, 
      {131, 147, 249}, {81, 40, 180}, {44, 43, 169}, {124, 131, 254}, {176, 164, 235}, {218, 41, 149}, {132, 87, 234}, {204, 43, 168}, 
      {128, 223, 201}, {129, 126, 254}, {230, 197, 171}, {29, 195, 169}, {55, 84, 208}, {114, 148, 250}, {91, 181, 235}, {132, 237, 183}, 
      {133, 140, 250}, {120, 125, 254}, {212, 171, 209}, {80, 92, 232}, {13, 169, 152}, {115, 140, 252}, {115, 102, 246}, {168, 154, 248}, 
      {130, 108, 249}, {122, 6, 164}, {177, 92, 232}, {73, 121, 219}, {245, 103, 149}, {130, 7, 164}, {209, 184, 206}, {135, 155, 248}, 
      {130, 48, 204}, {9, 103, 147}, {86, 234, 172}, {53, 181, 204}, {23, 57, 146}, {203, 76, 204}, {118, 88, 237}, {34, 215, 142}, 
      {123, 169, 237}, {93, 106, 247}, {232, 57, 145}, {25, 169, 177}, {92, 152, 247}, {86, 92, 221}, {245, 170, 151}, {129, 199, 227}, 
      {120, 155, 247}, {48, 61, 192}, {139, 169, 248}, {219, 67, 180}, {167, 104, 247}, {114, 116, 251}, {134, 87, 244}, {30, 67, 179}, 
      {219, 215, 148}, {111, 109, 248}, {202, 83, 208}, {154, 147, 251}, {158, 108, 251}, {140, 108, 235}, {20, 55, 155}, {206, 104, 206}, 
      {24, 197, 158}, {147, 115, 251}, {230, 57, 156}, {132, 254, 146}, {170, 156, 235}, {149, 141, 249}, {99, 105, 213}, {147, 123, 251}, 
      {175, 164, 247}, {55, 25, 147}, {117, 165, 248}, {85, 247, 148}, {140, 121, 225}, {234, 170, 186}, {233, 198, 158}, {194, 24, 148}, 
      {143, 223, 203}, {141, 198, 227}, {124, 49, 219}, {25, 135, 183}, {17, 104, 177}, {234, 137, 182}, {233, 103, 175}, {128, 48, 221}, 
      {213, 134, 205}, {48, 154, 205}, {177, 220, 184}, {54, 214, 169}, {131, 247, 169}, {214, 195, 195}, {116, 47, 205}, {123, 202, 213}, 
      {201, 60, 193}, {129, 24, 179}, {123, 246, 172}, {78, 24, 166}, {216, 155, 205}, {211, 118, 205}, {116, 135, 224}, {104, 167, 224}, 
      {230, 88, 176}, {27, 59, 173}, {107, 151, 224}, {154, 89, 222}, {136, 185, 224}, {33, 190, 178}, {27, 123, 185}, {20, 152, 176}, 
      {236, 124, 175}, {118, 185, 224}, {28, 88, 185}, {243, 88, 151}, {241, 155, 174}, {10, 87, 148}, {9, 119, 150}, {246, 119, 151}, 
      {19, 185, 155}, {247, 155, 151}, {222, 189, 191}, {223, 60, 171}, {154, 151, 226}, {109, 72, 220}, {11, 154, 154}, {183, 232, 170}, 
      {242, 186, 153}, {176, 51, 182}, {129, 34, 196}, {121, 35, 194}, {114, 119, 219}, {122, 1, 138}, {162, 211, 197}, {140, 209, 227}, 
      {127, 230, 194}, {73, 57, 231}, {173, 9, 143}, {125, 254, 146}, {209, 214, 172}, {142, 232, 195}, {174, 247, 148}, {114, 58, 207}, 
      {123, 24, 178}, {124, 236, 184}, {192, 170, 221}, {127, 213, 210}, {130, 209, 223}, {197, 179, 218}, {169, 24, 167}, {114, 34, 181}, 
      {174, 180, 242}, {81, 218, 181}, {74, 140, 223}, {67, 169, 221}, {67, 153, 222}, {133, 57, 207}, {192, 87, 218}, {191, 101, 223}, 
      {73, 182, 219}, {128, 38, 210}, {68, 87, 219}, {129, 60, 225}, {73, 101, 223}, {122, 13, 176}, {42, 69, 192}, {171, 73, 216}, 
      {167, 182, 217}, {194, 140, 220}, {192, 206, 192}, {129, 219, 212}, {129, 11, 176}, {46, 215, 158}, {35, 107, 193}, {123, 38, 211}, 
      {48, 55, 180}, {72, 75, 218}, {218, 88, 192}, {125, 184, 234}, {168, 75, 232}, {169, 40, 180}, {190, 156, 224}, {87, 207, 198}, 
      {70, 233, 155}, {98, 104, 220}, {224, 102, 191}, {227, 120, 191}, {123, 62, 225}, {224, 195, 184}, {130, 5, 150}, {42, 186, 191}, 
      {32, 153, 192}, {122, 2, 151}, {143, 212, 214}, {213, 70, 191}, {14, 72, 161}, {13, 105, 162}, {12, 85, 162}, {85, 139, 247}, 
      {147, 196, 242}, {33, 167, 191}, {131, 242, 179}, {191, 120, 221}, {41, 196, 180}, {113, 87, 222}, {234, 153, 191} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferHexagon = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslHexagon = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeHexagon  = { 0, 254 }; // for running the demo
PaletteRange p_rangeHexagon0 = { 0, 254 }; // default range - includes all unique palette entries

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incHexagon = {0, 0, 0};
GlobalHSL hsl_incHexagon0 = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrHexagon0 = { 110, 160, 127, toFIXED(0.0), toFIXED(0.0), toFIXED(0.5), toFIXED(0.5), 0, 0, 0, 0}; // default attributes (for single color image)

static jo_palette hexagon_palette;

// Helper Functions

jo_palette	*my_hexagon_palette_handling(void)
{
    jo_create_palette(&hexagon_palette);
    return (&hexagon_palette);
}

void init_hexagon_img(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(my_hexagon_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "HEXAGON.TGA", 0);
    jo_vdp2_set_nbg2_8bits_image(&img, hexagon_palette.id, false, true);
    jo_free_img(&img);
    jo_set_tga_palette_handling(JO_NULL);

    InitNormal2d(&hslHexagon, &rgbHexagon, &light1, &p_rangeHexagon0, &attrHexagon0);
    MultiPaletteUpdate(&hexagon_palette, &hslHexagon, &hsl_incHexagon0, &p_rangeHexagon0);
    min_max_sl_id(&hslHexagon, &p_rangeHexagon0, &attrHexagon0);
    // slColorCalc(CC_ADD | CC_TOP | JO_NBG1_SCREEN);
}

void update_hexagon_color(void) {
    NormalMapLighting2d(&hslHexagon, &rgbHexagon, &bufferHexagon, &light1, &p_rangeHexagon0, &hsl_incHexagon0);
}

void update_hexagon_palette(void) {
    UpdatePaletteFromBuffer(&bufferHexagon, &hexagon_palette, &p_rangeHexagon0);
}

#endif // HEXAGON_H
