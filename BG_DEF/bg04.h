// bg04.h
#ifndef BG04_H
#define BG04_H

// this file is autogenerated - see tga_tools.pl

#include "../palettetools.h"
#include "../lighting.h"

// palette for normal map calculations
RgbPalette rgbBg04 = {
    { {191, 3, 51}, {117, 23, 53}, {133, 57, 83}, {77, 3, 61}, {3, 7, 79}, {3, 57, 101}, {47, 115, 155}, {79, 153, 185}, 
      {3, 7, 41}, {3, 29, 49}, {3, 109, 111}, {3, 75, 73}, {3, 57, 49}, {3, 45, 37}, {5, 65, 45}, {255, 255, 255}, 
      {255, 255, 241} }
};

// buffer palette for writing to CRAM (populated at runtime)
RgbBuff bufferBg04 = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0 }
};

// palette for calculating color and lighting - hue, saturation, luminance (populated at runtime)
HslPalette hslBg04 = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0} }
};

// palette ranges - used with the palette group collection.
PaletteRange p_rangeBg04  = { 0, 16 }; // for running the demo
PaletteRange p_rangeBg040 = { 0, 16 }; // default range - includes all unique palette entries

// tracks the accumulation of changes for the HSL color model
GlobalHSL hsl_incBg04 = {0, 0, 0};

// initial image setup: hue, saturation, luminance, x_pos, y_pos, x_scale, y_scale, x_scroll (rate), y_scroll (rate), min_sat_id, max_sat_id, min_lum_id, max_lum_id
ImageAttr attrBg040 = { 0, 0, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), toFIXED(0.0), 0, 0, 0, 0}; // default attributes (for single color image)

PaletteRange *paletteRangeBg04[] = {
    &p_rangeBg040   // Index 0
};

Uint8 paletteGroups = 1;

Uint8 bg04_spr_id;

static jo_palette bg04_palette;

// Helper Functions

jo_palette	*my_bg04_palette_handling(void)
{
    jo_create_palette(&bg04_palette);
    return (&bg04_palette);
}

void init_bg04_img(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(my_bg04_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "BG04.TGA", 0);
    jo_vdp2_set_nbg1_8bits_image(&img, bg04_palette.id, false);
    jo_free_img(&img);

    MultiRgbToHsl(&hslBg04, &rgbBg04, &p_rangeBg040);
    min_max_sl_id(&hslBg04, &p_rangeBg040, &attrBg040);
}

void update_bg04_color(void) {
    MultiPalette2Buffer(&bufferBg04, &hslBg04, &hsl_incBg040, &p_rangeBg04);
}

void update_bg04_palette(void) {
    UpdatePaletteFromBuffer(&bufferBg04, &bg04_palette, &p_rangeBg04);
}

void reset_bg04 (void) {
    MultiRgbToHsl(&hslBg04, &rgbBg04, &p_rangeBg040);
    min_max_sl_id(&hslBg04, &p_rangeBg040, &attrBg040);
    MultiPalette2Buffer(&bufferBg04, &hslBg04, &hsl_incBg040, &p_rangeBg040);
}

#endif // BG04_H
